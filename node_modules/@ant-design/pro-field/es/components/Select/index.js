import "antd/es/select/style";
import _Select from "antd/es/select";
import "antd/es/spin/style";
import _Spin from "antd/es/spin";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import React, { useState, useImperativeHandle, useEffect, useRef, useContext } from 'react';
import { useDeepCompareEffect } from '@ant-design/pro-utils';
import { useIntl } from '@ant-design/pro-provider';
import SizeContext from 'antd/lib/config-provider/SizeContext';
import LightSelect from './LightSelect';
import TableStatus from '../Status';
export var ObjToMap = function ObjToMap(value) {
  if (!value) {
    return value;
  }

  if (getType(value) === 'map') {
    return value;
  }

  return new Map(Object.entries(value));
};
/**
 * 转化 text 和 valueEnum
 * 通过 type 来添加 Status
 * @param text
 * @param valueEnum
 * @param pure 纯净模式，不增加 status
 */

export var proFieldParsingText = function proFieldParsingText(text, valueEnumParams, pure) {
  if (text === undefined || text === null) {
    return null;
  }

  if (!valueEnumParams) {
    return text;
  }

  var valueEnum = ObjToMap(valueEnumParams);

  if (!valueEnum) {
    return text;
  }

  if (!valueEnum.has(text) && !valueEnum.has("".concat(text))) {
    return text;
  }

  var domText = valueEnum.get(text) || valueEnum.get("".concat(text));

  if (domText.status) {
    if (pure) {
      return domText.text;
    }

    var status = domText.status;
    var Status = TableStatus[status || 'Init'];

    if (Status) {
      return /*#__PURE__*/React.createElement(Status, null, domText.text);
    }
  }

  return domText.text || domText;
};
/**
 * 获取类型的 type
 * @param obj
 */

function getType(obj) {
  // @ts-ignore
  var type = Object.prototype.toString.call(obj).match(/^\[object (.*)\]$/)[1].toLowerCase();
  if (type === 'string' && _typeof(obj) === 'object') return 'object'; // Let "new String('')" return 'object'

  if (obj === null) return 'null'; // PhantomJS has type "DOMWindow" for null

  if (obj === undefined) return 'undefined'; // PhantomJS has type "DOMWindow" for undefined

  return type;
}
/**
 * 把 value 的枚举转化为数组
 * @param valueEnum
 */


export var proFieldParsingValueEnumToArray = function proFieldParsingValueEnumToArray() {
  var valueEnumParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();
  var enumArray = [];
  var valueEnum = ObjToMap(valueEnumParams);

  if (!valueEnum) {
    return [];
  }

  valueEnum.forEach(function (_, key) {
    if (!valueEnum.has(key) && !valueEnum.has("".concat(key))) {
      return;
    }

    var value = valueEnum.get(key) || valueEnum.get("".concat(key));

    if (!value) {
      return;
    }

    if (_typeof(value) === 'object' && (value === null || value === void 0 ? void 0 : value.text)) {
      enumArray.push({
        text: value === null || value === void 0 ? void 0 : value.text,
        value: key,
        disabled: value.disabled
      });
      return;
    }

    enumArray.push({
      text: value,
      value: key
    });
  });
  return enumArray;
};

var useFetchData = function useFetchData(props) {
  var _useState = useState(function () {
    return proFieldParsingValueEnumToArray(ObjToMap(props.valueEnum)).map(function (_ref) {
      var value = _ref.value,
          text = _ref.text;
      return {
        label: text,
        value: value
      };
    });
  }),
      _useState2 = _slicedToArray(_useState, 2),
      options = _useState2[0],
      setOptions = _useState2[1];

  useDeepCompareEffect(function () {
    setOptions(proFieldParsingValueEnumToArray(ObjToMap(props.valueEnum)).map(function (_ref2) {
      var value = _ref2.value,
          text = _ref2.text,
          rest = _objectWithoutProperties(_ref2, ["value", "text"]);

      return _objectSpread({
        label: text,
        value: value
      }, rest);
    }));
  }, [props.valueEnum]);

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      loading = _useState4[0],
      setLoading = _useState4[1];

  var fetchData = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var data;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (props.request) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              setLoading(true);
              _context.next = 5;
              return props.request(props.params, props);

            case 5:
              data = _context.sent;
              setOptions(data);
              setLoading(false);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function fetchData() {
      return _ref3.apply(this, arguments);
    };
  }();

  useEffect(function () {
    fetchData();
  }, [props.params]);
  return [loading, options, fetchData];
};
/**
 * 可以根据  valueEnum 来进行类型的设置
 * @param
 */


var FieldSelect = function FieldSelect(props, ref) {
  var mode = props.mode,
      valueEnum = props.valueEnum,
      render = props.render,
      renderFormItem = props.renderFormItem,
      request = props.request,
      fieldProps = props.fieldProps,
      plain = props.plain,
      children = props.children,
      light = props.light,
      rest = _objectWithoutProperties(props, ["mode", "valueEnum", "render", "renderFormItem", "request", "fieldProps", "plain", "children", "light"]);

  var inputRef = useRef();
  var intl = useIntl();

  var _useFetchData = useFetchData(props),
      _useFetchData2 = _slicedToArray(_useFetchData, 3),
      loading = _useFetchData2[0],
      options = _useFetchData2[1],
      _fetchData = _useFetchData2[2];

  var size = useContext(SizeContext);
  useImperativeHandle(ref, function () {
    return _objectSpread(_objectSpread({}, inputRef.current || {}), {}, {
      fetchData: function fetchData() {
        return _fetchData();
      }
    });
  });

  if (mode === 'read') {
    if (loading) {
      return /*#__PURE__*/React.createElement(_Spin, null);
    }

    var optionsValueEnum = props.request ? options.reduce(function (pre, cur) {
      return _objectSpread(_objectSpread({}, pre), {}, _defineProperty({}, cur.value, cur.label));
    }, {}) : undefined;
    var dom = /*#__PURE__*/React.createElement(React.Fragment, null, proFieldParsingText(rest.text, ObjToMap(optionsValueEnum || valueEnum)));

    if (render) {
      return render(rest.text, _objectSpread({
        mode: mode
      }, fieldProps), dom) || null;
    }

    return dom;
  }

  if (mode === 'edit' || mode === 'update') {
    var _dom;

    if (light) {
      _dom = /*#__PURE__*/React.createElement(LightSelect, _extends({
        loading: loading,
        ref: inputRef,
        allowClear: true,
        size: size
      }, rest, {
        options: options
      }, fieldProps));
    } else {
      _dom = /*#__PURE__*/React.createElement(_Select, _extends({
        style: {
          minWidth: 100
        },
        loading: loading,
        ref: inputRef,
        allowClear: true
      }, rest, {
        placeholder: intl.getMessage('tableForm.selectPlaceholder', '请选择'),
        options: options
      }, fieldProps));
    }

    if (renderFormItem) {
      return renderFormItem(rest.text, _objectSpread({
        mode: mode
      }, fieldProps), _dom) || null;
    }

    return _dom;
  }

  return null;
};

export default React.forwardRef(FieldSelect);