import React from 'react';
import { ProSchemaValueEnumMap, ProSchemaValueEnumObj } from '@ant-design/pro-utils';
export declare type ProFieldValueEnumType = ProSchemaValueEnumMap | ProSchemaValueEnumObj;
export declare const ObjToMap: (value: ProFieldValueEnumType | undefined) => ProSchemaValueEnumMap | undefined;
/**
 * 转化 text 和 valueEnum
 * 通过 type 来添加 Status
 * @param text
 * @param valueEnum
 * @param pure 纯净模式，不增加 status
 */
export declare const proFieldParsingText: (text: string | number, valueEnumParams?: ProSchemaValueEnumMap | ProSchemaValueEnumObj | undefined, pure?: boolean | undefined) => {} | null | undefined;
/**
 * 把 value 的枚举转化为数组
 * @param valueEnum
 */
export declare const proFieldParsingValueEnumToArray: (valueEnumParams?: ProFieldValueEnumType | undefined) => {
    value: string | number;
    text: string;
}[];
export declare type ProFieldRequestData = (params: any, props: FieldSelectProps) => Promise<{
    label: React.ReactNode;
    value: React.ReactText;
}[]>;
export declare type FieldSelectProps = {
    text: string;
    /**
     * 值的枚举，如果存在枚举，Search 中会生成 select
     */
    valueEnum?: ProFieldValueEnumType;
    /**
     * 从服务器读取选项
     */
    request?: ProFieldRequestData;
    /**
     * 重新触发的时机
     */
    params?: any;
};
declare const _default: React.ForwardRefExoticComponent<{
    text: React.ReactNode;
    fieldProps?: any;
    mode: import("../..").ProFieldFCMode;
    plain?: boolean | undefined;
    light?: boolean | undefined;
    label?: React.ReactNode;
    valueEnum?: ProSchemaValueEnumMap | ProSchemaValueEnumObj | undefined;
} & import("../..").ProRenderFieldProps & FieldSelectProps & React.RefAttributes<any>>;
export default _default;
