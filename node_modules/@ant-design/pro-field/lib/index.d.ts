import React, { ReactNode } from 'react';
import { Moment } from 'moment';
import FieldPercent from './components/Percent';
import FieldIndexColumn from './components/IndexColumn';
import FieldProgress from './components/Progress';
import FieldMoney from './components/Money';
import FieldDatePicker from './components/DatePicker';
import FieldRangePicker from './components/RangePicker';
import FieldCode from './components/Code';
import FieldTimePicker from './components/TimePicker';
import FieldText from './components/Text';
import FieldStatus from './components/Status';
import FiledSelect, { ProFieldValueEnumType, ProFieldRequestData, proFieldParsingText, proFieldParsingValueEnumToArray } from './components/Select';
export declare type ProFieldTextType = string | number | React.ReactText[] | Moment | Moment[] | null;
export type { ProFieldValueEnumType };
export declare type ProFieldEmptyText = string | false;
/**
 * password 密码框
 * money 金额
 * option 操作 需要返回一个数组
 * date 日期 YYYY-MM-DD
 * dateRange 日期范围 YYYY-MM-DD[]
 * dateTime 日期和时间 YYYY-MM-DD HH:mm:ss
 * dateTimeRange 范围日期和时间 YYYY-MM-DD HH:mm:ss[]
 * time: 时间 HH:mm:ss
 * index：序列
 * progress: 进度条
 * percent: 百分比
 * digit 数值
 * avatar 头像
 * code 代码块
 * jsonCode json 的代码块，格式化了一下
 */
export declare type ProFieldValueType = 'password' | 'money' | 'textarea' | 'option' | 'date' | 'dateWeek' | 'dateMonth' | 'dateQuarter' | 'dateYear' | 'dateRange' | 'dateTimeRange' | 'dateTime' | 'time' | 'text' | 'select' | 'index' | 'indexBorder' | 'progress' | 'percent' | 'digit' | 'avatar' | 'code' | 'jsonCode';
export declare type ProFieldFCMode = 'read' | 'edit' | 'update';
declare type BaseProFieldFC = {
    /**
     * 值的类型
     */
    text: React.ReactNode;
    fieldProps?: any;
    /**
     * 模式类型
     */
    mode: ProFieldFCMode;
    /**
     * 简约模式
     */
    plain?: boolean;
    /**
     * 轻量模式
     */
    light?: boolean;
    /**
     * label
     */
    label?: React.ReactNode;
    /**
     * 映射值的类型
     */
    valueEnum?: ProFieldValueEnumType;
};
/**
 * render 第二个参数，里面包含了一些常用的参数
 */
export declare type ProFieldFCRenderProps = {
    mode?: ProFieldFCMode;
    value?: any;
    onChange?: (value: any) => void;
} & BaseProFieldFC;
export declare type ProRenderFieldProps = {
    render?: ((text: any, props: Omit<ProFieldFCRenderProps, 'value' | 'onChange'>, dom: JSX.Element) => JSX.Element) | undefined;
    renderFormItem?: ((text: any, props: ProFieldFCRenderProps, dom: JSX.Element) => JSX.Element) | undefined;
};
/**
 * 默认的 Field 需要实现的功能
 */
export declare type ProFieldFC<T> = React.ForwardRefRenderFunction<any, BaseProFieldFC & ProRenderFieldProps & T>;
export declare type ProFieldValueObjectType = {
    type: 'progress' | 'money' | 'percent';
    status?: 'normal' | 'active' | 'success' | 'exception' | undefined;
    locale?: string;
    /** percent */
    showSymbol?: boolean;
    showColor?: boolean;
    precision?: number;
    request?: ProFieldRequestData;
};
/**
 * value type by function
 */
export declare type ProFieldValueTypeFunction<T> = (item: T) => ProFieldValueType | ProFieldValueObjectType;
declare type RenderProps = Omit<ProFieldFCRenderProps, 'text'> & ProRenderFieldProps & {
    emptyText?: React.ReactNode;
    [key: string]: any;
};
/**
 * 根据不同的类型来转化数值
 * @param text
 * @param valueType
 */
declare const defaultRenderText: (text: ProFieldTextType, valueType: ProFieldValueType | ProFieldValueObjectType, props: RenderProps) => React.ReactNode;
export { defaultRenderText };
export type { ProFieldRequestData };
export { FieldPercent, FieldIndexColumn, FieldProgress, FieldMoney, FieldDatePicker, FieldRangePicker, FieldCode, FieldTimePicker, FieldText, FieldStatus, FiledSelect, proFieldParsingText, proFieldParsingValueEnumToArray, };
declare const _default: React.ForwardRefRenderFunction<any, {
    text?: string | number | Moment | Moment[] | (string | number)[] | null | undefined;
    valueType?: "text" | "code" | "option" | "progress" | "select" | "textarea" | "time" | "percent" | "date" | "dateTime" | "money" | ProFieldValueObjectType | "password" | "dateWeek" | "dateMonth" | "dateQuarter" | "dateYear" | "dateRange" | "dateTimeRange" | "index" | "indexBorder" | "digit" | "avatar" | "jsonCode" | undefined;
} & Pick<ProFieldFCRenderProps, "mode" | "fieldProps" | "plain" | "light" | "label" | "valueEnum" | "value" | "onChange"> & ProRenderFieldProps & {
    [key: string]: any;
    emptyText?: React.ReactNode;
}>;
export default _default;
