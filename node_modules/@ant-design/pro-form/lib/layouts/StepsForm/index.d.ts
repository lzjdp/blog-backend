import React from 'react';
import { Form } from 'antd';
import { FormProviderProps } from 'antd/lib/form/context';
import { StepsProps } from 'antd/lib/steps';
import { FormInstance } from 'antd/lib/form';
import StepForm, { StepFormProps } from './StepForm';
import './index.less';
import { ProFormProps } from '../ProForm';
import { CommonFormProps } from '../../BaseForm';
declare type Store = {
    [name: string]: any;
};
interface StepsFormProps<T = Store> extends FormProviderProps {
    onFinish?: (values: T) => Promise<void>;
    current?: number;
    stepsProps?: StepsProps;
    formProps?: ProFormProps;
    onCurrentChange?: (current: number) => void;
    /**
     * 自定义步骤器
     */
    stepsRender?: (steps: Array<{
        key: string;
        title?: React.ReactNode;
    }>, defaultDom: React.ReactNode) => React.ReactNode;
    /**
     * 自定义单个表单
     * @param form from 的 dom，可以放置到别的位置
     */
    stepFormRender?: (from: React.ReactNode) => React.ReactNode;
    /**
     * 自定义整个表单区域
     * @param form from 的 dom，可以放置到别的位置
     * @param submitter 操作按钮
     */
    stepsFormRender?: (from: React.ReactNode, submitter: React.ReactNode) => React.ReactNode;
    /**
     * 按钮的统一配置，优先级低于分布表单的配置
     */
    submitter?: CommonFormProps['submitter'];
}
export declare const StepsFormProvide: React.Context<{
    unRegForm: (name: string) => void;
    onFormFinish: (name: string, formData: any) => void;
    keyArray: string[];
    formArrayRef: React.MutableRefObject<Array<React.MutableRefObject<FormInstance<any> | undefined>>>;
    loading: boolean;
    setLoading: React.Dispatch<React.SetStateAction<boolean>>;
    formMapRef: React.MutableRefObject<Map<string, StepFormProps>>;
    next: () => void;
} | undefined>;
declare const StepsForm: React.FC<StepsFormProps> & {
    StepForm: typeof StepForm;
    useForm: typeof Form.useForm;
};
export type { StepFormProps, StepsFormProps };
export default StepsForm;
