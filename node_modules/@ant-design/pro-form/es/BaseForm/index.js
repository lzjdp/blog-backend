import "antd/es/form/style";
import _Form from "antd/es/form";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef, useEffect, useContext } from 'react';
import { ConfigProviderWrap } from '@ant-design/pro-provider';
import { LabelIconTip, conversionSubmitValue, pickProFormItemProps } from '@ant-design/pro-utils';
import SizeContext from 'antd/lib/config-provider/SizeContext';
import FieldContext from '../FieldContext';
import Submitter from '../components/Submitter';
import LightWrapper from './LightWrapper';
var WIDTH_SIZE_ENUM = {
  // 适用于短数字，短文本或者选项
  xs: 104,
  // 适用于较短字段录入、如姓名、电话、ID 等。
  s: 216,
  // 标准宽度，适用于大部分字段长度。
  m: 328,
  // 适用于较长字段录入，如长网址、标签组、文件路径等。
  l: 440,
  // 适用于长文本录入，如长链接、描述、备注等，通常搭配自适应多行输入框或定高文本域使用。
  xl: 552
};
export function createField(Field, config) {
  var FieldWithContext = function FieldWithContext(props) {
    var _rest$fieldProps;

    var size = useContext(SizeContext);

    var label = props.label,
        tip = props.tip,
        tooltip = props.tooltip,
        placeholder = props.placeholder,
        width = props.width,
        proFieldProps = props.proFieldProps,
        bordered = props.bordered,
        rest = _objectWithoutProperties(props, ["label", "tip", "tooltip", "placeholder", "width", "proFieldProps", "bordered"]);

    var _ref = config || {},
        valueType = _ref.valueType,
        customLightMode = _ref.customLightMode,
        lightFilterLabelFormatter = _ref.lightFilterLabelFormatter,
        _ref$valuePropName = _ref.valuePropName,
        valuePropName = _ref$valuePropName === void 0 ? 'value' : _ref$valuePropName,
        ignoreFelidWidth = _ref.ignoreFelidWidth,
        defaultFormItemProps = _objectWithoutProperties(_ref, ["valueType", "customLightMode", "lightFilterLabelFormatter", "valuePropName", "ignoreFelidWidth"]);
    /**
     * 从 context 中拿到的值
     */


    var _React$useContext = React.useContext(FieldContext),
        fieldProps = _React$useContext.fieldProps,
        formItemProps = _React$useContext.formItemProps,
        setFieldValueType = _React$useContext.setFieldValueType;

    useEffect(function () {
      if (setFieldValueType && props.name) {
        // Field.type === 'ProField' 时 props 里面是有 valueType 的，所以要设置一下
        // 写一个 ts 比较麻烦，用 any 顶一下
        setFieldValueType(String(props.name), valueType || rest.valueType || 'text');
      }
    }, []); // restFormItemProps is user props pass to Form.Item

    var restFormItemProps = pickProFormItemProps(rest);
    var myWidth = ignoreFelidWidth ? width : width || 'm';

    var realFieldProps = _objectSpread(_objectSpread(_objectSpread({
      disabled: props.disabled,
      // 轻量筛选模式下默认不显示 FormItem 的 label，label 设置为 placeholder
      placeholder: (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light) ? placeholder || label : placeholder
    }, fieldProps || {}), rest.fieldProps || {}), {}, {
      style: _objectSpread(_objectSpread({
        // 有些组件是不需要自带的 width
        width: myWidth ? WIDTH_SIZE_ENUM[myWidth] || width : width
      }, (_rest$fieldProps = rest.fieldProps) === null || _rest$fieldProps === void 0 ? void 0 : _rest$fieldProps.style), fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.style)
    });

    var field = /*#__PURE__*/React.createElement(Field, _extends({}, rest, {
      // ProXxx 上面的 props 透传给 Filed，可能包含 Field 自定义的 props，比如 ProFormSelect 的 request
      fieldProps: realFieldProps,
      proFieldProps: proFieldProps
    }));
    return /*#__PURE__*/React.createElement(_Form.Item, _extends({
      // title 是用于提升读屏的能力的，没有参与逻辑
      // @ts-expect-error
      title: label // 全局的提供一个 tip 功能，可以减少代码量
      // 轻量模式下不通过 FormItem 显示 label
      ,
      label: label && (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light) !== true ? /*#__PURE__*/React.createElement(LabelIconTip, {
        label: label,
        tooltip: tooltip || tip
      }) : undefined,
      valuePropName: valuePropName
    }, defaultFormItemProps, formItemProps, restFormItemProps), /*#__PURE__*/React.createElement(LightWrapper, _extends({}, realFieldProps, {
      bordered: bordered,
      size: size,
      light: proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light,
      customLightMode: customLightMode,
      label: label,
      labelFormatter: lightFilterLabelFormatter,
      valuePropName: valuePropName
    }), field));
  };

  return FieldWithContext;
}

var BaseForm = function BaseForm(props) {
  var children = props.children,
      contentRender = props.contentRender,
      submitter = props.submitter,
      fieldProps = props.fieldProps,
      formItemProps = props.formItemProps,
      groupProps = props.groupProps,
      _props$dateFormatter = props.dateFormatter,
      dateFormatter = _props$dateFormatter === void 0 ? 'string' : _props$dateFormatter,
      userForm = props.form,
      propsFormRef = props.formRef,
      rest = _objectWithoutProperties(props, ["children", "contentRender", "submitter", "fieldProps", "formItemProps", "groupProps", "dateFormatter", "form", "formRef"]);

  var _Form$useForm = _Form.useForm(),
      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),
      form = _Form$useForm2[0];

  var formRef = useRef(userForm || form);
  var fieldsValueType = useRef({});

  var setFieldValueType = function setFieldValueType(name, type) {
    fieldsValueType.current[name] = type || 'text';
  };

  var items = React.Children.toArray(children);
  var submitterProps = typeof submitter === 'boolean' || !submitter ? {} : submitter;
  var submitterNode = submitter === false ? undefined : /*#__PURE__*/React.createElement(Submitter, _extends({}, submitterProps, {
    form: userForm || form
  }));
  var content = contentRender ? contentRender(items, submitterNode) : items;
  return (
    /*#__PURE__*/
    // 增加国际化的能力，与 table 组件可以统一
    React.createElement(ConfigProviderWrap, null, /*#__PURE__*/React.createElement(FieldContext.Provider, {
      value: {
        fieldProps: fieldProps,
        formItemProps: formItemProps,
        groupProps: groupProps,
        setFieldValueType: setFieldValueType
      }
    }, /*#__PURE__*/React.createElement(SizeContext.Provider, {
      value: rest.size
    }, /*#__PURE__*/React.createElement(_Form, _extends({
      form: userForm || form
    }, rest, {
      onFinish: function onFinish(values) {
        if (rest.onFinish) {
          rest.onFinish(conversionSubmitValue(values, dateFormatter, fieldsValueType.current));
        }
      }
    }), /*#__PURE__*/React.createElement(_Form.Item, {
      noStyle: true,
      shouldUpdate: true
    }, function (formInstance) {
      // 不 setTimeout 一下拿到的是比较旧的
      setTimeout(function () {
        // 支持 fromRef，这里 ref 里面可以随时拿到最新的值
        if (propsFormRef) {
          propsFormRef.current = formInstance;
        }

        formRef.current = formInstance;
      }, 0);
    }), content))))
  );
};

export default BaseForm;