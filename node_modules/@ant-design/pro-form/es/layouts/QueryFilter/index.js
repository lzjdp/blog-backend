import "antd/es/row/style";
import _Row from "antd/es/row";
import "antd/es/divider/style";
import _Divider from "antd/es/divider";
import "antd/es/col/style";
import _Col from "antd/es/col";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable no-param-reassign */
import React, { useState } from 'react';
import RcResizeObserver from 'rc-resize-observer';
import { useIntl } from '@ant-design/pro-provider';
import useMergedState from 'rc-util/lib/hooks/useMergedState';
import BaseForm from '../../BaseForm';
import Actions from './Actions';
var CONFIG_SPAN_BREAKPOINTS = {
  xs: 513,
  sm: 513,
  md: 785,
  lg: 1057,
  xl: 1057,
  xxl: Infinity
};
/**
 * 配置表单列变化的容器宽度断点
 */

var BREAKPOINTS = {
  vertical: [// [breakpoint, cols, layout]
  [513, 1, 'vertical'], [785, 2, 'vertical'], [1057, 3, 'vertical'], [Infinity, 4, 'vertical']],
  default: [[513, 1, 'vertical'], [701, 2, 'vertical'], [1062, 2, 'horizontal'], [1352, 3, 'horizontal'], [Infinity, 4, 'horizontal']]
};
/**
 * 合并用户和默认的配置
 * @param layout
 * @param width
 */

var getSpanConfig = function getSpanConfig(layout, width, span) {
  if (span && typeof span === 'number') {
    return {
      span: span,
      layout: layout
    };
  }

  var spanConfig = span ? Object.keys(span).map(function (key) {
    return [CONFIG_SPAN_BREAKPOINTS[key], 24 / span[key], 'horizontal'];
  }) : BREAKPOINTS[layout || 'default'];
  var breakPoint = (spanConfig || BREAKPOINTS.default).find(function (item) {
    return width < item[0] + 16;
  });
  return {
    span: 24 / breakPoint[1],
    layout: breakPoint[2]
  };
};

var QueryFilter = function QueryFilter(props) {
  var controlCollapsed = props.collapsed,
      _props$defaultCollaps = props.defaultCollapsed,
      defaultCollapsed = _props$defaultCollaps === void 0 ? false : _props$defaultCollaps,
      layout = props.layout,
      defaultColsNumber = props.defaultColsNumber,
      span = props.span,
      onReset = props.onReset,
      onCollapse = props.onCollapse,
      optionRender = props.optionRender,
      _props$labelWidth = props.labelWidth,
      labelWidth = _props$labelWidth === void 0 ? 98 : _props$labelWidth,
      style = props.style,
      split = props.split,
      collapseRender = props.collapseRender,
      propsResetText = props.resetText,
      propsSearchText = props.searchText,
      rest = _objectWithoutProperties(props, ["collapsed", "defaultCollapsed", "layout", "defaultColsNumber", "span", "onReset", "onCollapse", "optionRender", "labelWidth", "style", "split", "collapseRender", "resetText", "searchText"]);

  var intl = useIntl();

  var _useMergedState = useMergedState(function () {
    return defaultCollapsed;
  }, {
    value: controlCollapsed,
    onChange: onCollapse
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      collapsed = _useMergedState2[0],
      setCollapsed = _useMergedState2[1]; // use style.width as the defaultWidth for unit test


  var defaultWidth = typeof (style === null || style === void 0 ? void 0 : style.width) === 'number' ? style === null || style === void 0 ? void 0 : style.width : 1024;

  var _useState = useState(function () {
    return getSpanConfig(layout, defaultWidth + 16, span);
  }),
      _useState2 = _slicedToArray(_useState, 2),
      spanSize = _useState2[0],
      setSpanSize = _useState2[1];

  var showLength = defaultColsNumber !== undefined ? defaultColsNumber : Math.max(1, 24 / spanSize.span - 1);
  var labelFlexStyle;

  if (labelWidth && spanSize.layout !== 'vertical' && labelWidth !== 'auto') {
    labelFlexStyle = "0 0 ".concat(labelWidth, "px");
  }

  var resetText = propsResetText || intl.getMessage('tableForm.reset', '重置');
  var searchText = propsSearchText || intl.getMessage('tableForm.search', '搜索');
  /**
   * 如果 optionRender 是个方法调用一下
   */

  var render = typeof optionRender === 'function' ? function (_, dom) {
    return optionRender(_objectSpread(_objectSpread({}, props), {}, {
      resetText: resetText,
      searchText: searchText
    }), props, dom);
  } : optionRender;
  return /*#__PURE__*/React.createElement(BaseForm, _extends({}, rest, {
    style: style,
    layout: spanSize.layout,
    fieldProps: {
      style: {
        width: '100%'
      }
    },
    formItemProps: {
      labelCol: {
        flex: labelFlexStyle
      }
    },
    groupProps: {
      titleStyle: {
        display: 'inline-block',
        marginRight: 16
      },
      titleRender: function titleRender(title) {
        return "".concat(title, ":");
      }
    },
    contentRender: function contentRender(items, renderSubmitter) {
      var itemsWithInfo = [];
      var submitter = renderSubmitter;

      if (submitter) {
        submitter = React.cloneElement(submitter, _objectSpread({
          searchConfig: {
            resetText: resetText,
            submitText: searchText
          },
          render: render,
          onReset: onReset
        }, submitter.props));
      } // totalSpan 统计控件占的位置，计算 offset 保证查询按钮在最后一列


      var totalSpan = 0;
      var lastVisibleItemIndex = items.length - 1;
      items.forEach(function (item, index) {
        var _item$props, _item$props2, _item$props3;

        // 如果 formItem 自己配置了 hidden，默认使用它自己的
        var hidden = (item === null || item === void 0 ? void 0 : (_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.hidden) || false;
        var colSize = React.isValidElement(item) ? (item === null || item === void 0 ? void 0 : (_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.colSize) || 1 : 1;
        var colSpan = Math.min(spanSize.span * colSize, 24);

        if (collapsed && index >= showLength || hidden) {
          hidden = true;
        } else {
          if (24 - totalSpan % 24 < colSpan) {
            // 如果当前行空余位置放不下，那么折行
            totalSpan += 24 - totalSpan % 24;
          }

          totalSpan += colSpan;
          lastVisibleItemIndex = index;
        }

        itemsWithInfo.push({
          span: colSpan,
          element: item,
          key: React.isValidElement(item) ? item.key || "".concat(((_item$props3 = item.props) === null || _item$props3 === void 0 ? void 0 : _item$props3.name) || index, "-").concat(index, "}") : index,
          hidden: hidden
        });
      }); // for split compute

      var currentSpan = 0;
      var defaultRender = items.length - 1 >= showLength ? undefined : false;
      return /*#__PURE__*/React.createElement(RcResizeObserver, {
        key: "resize-observer",
        onResize: function onResize(_ref) {
          var width = _ref.width;
          setSpanSize(getSpanConfig(layout, width, span));
        }
      }, /*#__PURE__*/React.createElement(_Row, {
        gutter: 16,
        justify: "start",
        key: "resize-observer-row"
      }, itemsWithInfo.map(function (item, index) {
        if (React.isValidElement(item.element) && item.hidden) {
          return React.cloneElement(item.element, {
            hidden: true,
            key: item.key || index
          });
        }

        currentSpan += item.span;
        var colItem = /*#__PURE__*/React.createElement(_Col, {
          key: item.key,
          span: item.span
        }, item.element);

        if (split && currentSpan % 24 === 0 && index < lastVisibleItemIndex) {
          return [colItem, /*#__PURE__*/React.createElement(_Divider, {
            key: "line",
            style: {
              marginTop: -8,
              marginBottom: 16
            },
            dashed: true
          })];
        }

        return colItem;
      }), submitter && /*#__PURE__*/React.createElement(_Col, {
        span: spanSize.span,
        offset: 24 - spanSize.span - totalSpan % 24,
        style: {
          textAlign: 'right'
        }
      }, /*#__PURE__*/React.createElement(Actions, _extends({
        collapsed: collapsed,
        collapseRender: collapseRender || defaultRender
      }, rest, {
        submitter: submitter,
        setCollapsed: setCollapsed,
        style: {
          // 当表单是垂直布局且提交按钮不是独自在一行的情况下需要设置一个 paddingTop 使得与控件对齐
          paddingTop: layout === 'vertical' && totalSpan % 24 ? 30 : 0,
          // marginBottom 是为了和 FormItem 统一让下方保留一个 24px 的距离
          marginBottom: 24
        }
      })))));
    }
  }));
};

export default QueryFilter;