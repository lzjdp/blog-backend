import "antd/es/space/style";
import _Space from "antd/es/space";
import "antd/es/descriptions/style";
import _Descriptions from "antd/es/descriptions";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useEffect } from 'react';
import toArray from 'rc-util/lib/Children/toArray';
import Field from '@ant-design/pro-field';
import { LabelIconTip } from '@ant-design/pro-utils';
import get from 'rc-util/lib/utils/get';
import { stringify } from 'use-json-comparison';
import ProSkeleton from '@ant-design/pro-skeleton';
import useFetchData from './useFetchData';

var getDataFromConfig = function getDataFromConfig(item, entity) {
  var dataIndex = item.dataIndex;

  if (dataIndex) {
    var data = Array.isArray(dataIndex) ? get(entity, dataIndex) : entity[dataIndex];

    if (data !== undefined || data !== null) {
      return data;
    }
  }

  return item.children;
};

var conversionProProSchemaToDescriptionsItem = function conversionProProSchemaToDescriptionsItem(items, entity, action) {
  var options = []; // 因为 Descriptions 只是个语法糖，children 是不会执行的，所以需要这里处理一下

  var children = items.map(function (item, index) {
    var _restItem$label;

    if (React.isValidElement(item)) {
      return item;
    }

    var valueEnum = item.valueEnum,
        render = item.render,
        renderText = item.renderText,
        mode = item.mode,
        plain = item.plain,
        dataIndex = item.dataIndex,
        request = item.request,
        params = item.params,
        restItem = _objectWithoutProperties(item, ["valueEnum", "render", "renderText", "mode", "plain", "dataIndex", "request", "params"]);

    var title = typeof restItem.title === 'function' ? restItem.title(item, 'descriptions', restItem.title) : restItem.title;
    var defaultData = getDataFromConfig(item, entity);
    var text = renderText ? renderText(defaultData, entity, index, action) : defaultData; //  dataIndex 无所谓是否存在
    // 有些时候不需要 dataIndex 可以直接 render

    var valueType = typeof restItem.valueType === 'function' ? restItem.valueType(entity || {}, 'descriptions') : restItem.valueType;
    var field = /*#__PURE__*/React.createElement(_Descriptions.Item, _extends({}, restItem, {
      key: ((_restItem$label = restItem.label) === null || _restItem$label === void 0 ? void 0 : _restItem$label.toString()) || index,
      label: /*#__PURE__*/React.createElement(LabelIconTip, {
        label: title || restItem.label,
        tooltip: restItem.tooltip || restItem.tip
      })
    }), /*#__PURE__*/React.createElement(Field, {
      valueEnum: valueEnum,
      mode: mode || 'read',
      render: // 虽然有点丑，但是不用自己拼类型了
      render ? function (_, props, dom) {
        return /*#__PURE__*/React.createElement(React.Fragment, null, render(dom, entity, index, action, _objectSpread(_objectSpread({}, item), props)));
      } : undefined,
      valueType: valueType,
      plain: plain,
      text: text,
      request: request,
      params: request
    })); // 如果类型是 option 自动放到右上角

    if (valueType === 'option') {
      options.push(field);
      return null;
    }

    return field;
  });
  return {
    options: options,
    children: children
  };
};

var ProDescriptionsItem = function ProDescriptionsItem(props) {
  return /*#__PURE__*/React.createElement(_Descriptions.Item, props, props.children);
};

var ProDescriptions = function ProDescriptions(props) {
  var request = props.request,
      columns = props.columns,
      _props$params = props.params,
      params = _props$params === void 0 ? {} : _props$params,
      actionRef = props.actionRef,
      onRequestError = props.onRequestError,
      rest = _objectWithoutProperties(props, ["request", "columns", "params", "actionRef", "onRequestError"]);

  var action = useFetchData( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var data;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!request) {
              _context.next = 6;
              break;
            }

            _context.next = 3;
            return request(params);

          case 3:
            _context.t0 = _context.sent;
            _context.next = 7;
            break;

          case 6:
            _context.t0 = {
              data: {}
            };

          case 7:
            data = _context.t0;
            return _context.abrupt("return", data);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), {
    onRequestError: onRequestError,
    effects: [stringify(params)],
    manual: !request
  });
  /**
   * 支持 reload 的功能
   */

  useEffect(function () {
    if (actionRef) {
      actionRef.current = {
        reload: action.reload
      };
    }
  }, [action]); // loading 时展示
  // loading =  undefined 但是 request 存在时也应该展示

  if (action.loading || action.loading === undefined && request) {
    return /*#__PURE__*/React.createElement(ProSkeleton, {
      type: "descriptions",
      list: false,
      pageHeader: false
    });
  }

  var _action$dataSource = action.dataSource,
      dataSource = _action$dataSource === void 0 ? {} : _action$dataSource;

  var getColumns = function getColumns() {
    // 因为 Descriptions 只是个语法糖，children 是不会执行的，所以需要这里处理一下
    var childrenColumns = toArray(props.children).map(function (item) {
      var _item$props = item.props,
          valueEnum = _item$props.valueEnum,
          valueType = _item$props.valueType,
          dataIndex = _item$props.dataIndex,
          itemRequest = _item$props.request;

      if (!valueType && !valueEnum && !dataIndex && !itemRequest) {
        return item;
      }

      return item.props;
    });
    return [].concat(_toConsumableArray(childrenColumns), _toConsumableArray(columns || [])).filter(function (item) {
      if (['index', 'indexBorder'].includes(item.valueType)) {
        return false;
      }

      return !item.hideInDescriptions;
    });
  };

  var _conversionProProSche = conversionProProSchemaToDescriptionsItem(getColumns(), dataSource, (actionRef === null || actionRef === void 0 ? void 0 : actionRef.current) || action),
      options = _conversionProProSche.options,
      children = _conversionProProSche.children;

  return /*#__PURE__*/React.createElement(_Descriptions, _extends({}, rest, {
    extra: rest.extra ? /*#__PURE__*/React.createElement(_Space, null, options, rest.extra) : options,
    title: /*#__PURE__*/React.createElement(LabelIconTip, {
      label: rest.title,
      tooltip: rest.tooltip || rest.tip
    })
  }), children);
};

ProDescriptions.Item = ProDescriptionsItem;
export default ProDescriptions;