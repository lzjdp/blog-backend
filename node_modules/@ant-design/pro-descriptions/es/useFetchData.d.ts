export interface RequestData<T> {
    data: any;
    success?: boolean;
    [key: string]: any;
}
export interface UseFetchDataAction<T extends RequestData<any>> {
    dataSource: T['data'] | T;
    loading: boolean | undefined;
    reload: () => Promise<void>;
}
declare const useFetchData: <T extends RequestData<any>>(getData: () => Promise<T>, options?: {
    effects?: any[] | undefined;
    manual: boolean;
    onRequestError?: ((e: Error) => void) | undefined;
} | undefined) => UseFetchDataAction<T>;
export default useFetchData;
